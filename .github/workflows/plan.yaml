# This workflow will run a Terraform plan
# And add the output as a comment on a PR if one exists

name: Terraform Plan
on:
  push:
    branches-ignore: main

  pull_request:

  workflow_dispatch:

env:
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_aws_provider_external_id: ${{ secrets.AWS_PROVIDER_EXTERNAL_ID }}
  TF_VAR_aws_provider_role_arn: ${{ secrets.AWS_PROVIDER_ROLE_ARN }}

jobs:
  plan:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        workspace:
          - development
          - production

    env:
      TF_WORKSPACE: ${{ matrix.workspace }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.0.1"

      - name: Terraform Format Check
        id: tf-fmt
        run: terraform fmt -no-color -check

      - name: Terraform Init
        id: tf-init
        run: terraform init -no-color -input=false

      - name: Terraform Validate
        id: tf-validate
        run: terraform validate -no-color

      # - name: Terraform Workspace
      #   id: tf-workspace
      #   run: terraform workspace select ${{ env.TF_WORKSPACE }} || terraform workspace new ${{ env.TF_WORKSPACE }}

      - name: Terraform Plan
        id: tf-plan
        run: terraform plan -no-color -lock=false -input=false -var-file=vars/${{ env.TF_WORKSPACE }}.tfvars
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v4
        if: github.event_name == 'pull_request'
        env:
          PLAN: "Terraform\n${{ steps.tf-plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const plan_header = `#### Terraform Plan for \`${{ env.TF_WORKSPACE }}\``;
            const output = `${plan_header}

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            // const opts = github.issues.listComments({
            //   issue_number: context.issue.number,
            //   owner: context.repo.owner,
            //   repo: context.repo.repo
            // })

            const creator = context.payload.sender.login
            const opts = github.issues.listForRepo.endpoint.merge({
              ...context.issue,
              creator,
              state: 'all'
            })

            const comments = await github.paginate(opts)

            console.log(comments)

            for (const comment of comments) {
              if (comment.body.startsWith(plan_header)) {
                github.issues.updateComment({
                  comment_id: comment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                })

                return
              }
              else {
                github.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                })
              }
            }

      - name: Terraform Plan Status
        if: steps.tf-plan.outcome == 'failure'
        run: exit 1

